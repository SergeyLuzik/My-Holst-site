!function(){"use strict";const e=document.querySelector(".page-main").offsetWidth;if(e>800&&(()=>{const e=document.querySelector(".slider__slides-list"),t=parseInt(getComputedStyle(document.querySelector(".hero__slider")).gridTemplateColumns.split(" ")[0],10),n=parseInt(getComputedStyle(e).gap),o=e.children,s=o[0].offsetWidth,l=2*s+n-t,r=s+n,a="0.3s",i="translate(-12.5%, calc(12.5% - 16px)) scale(1.25)",c=document.querySelector(".slider-button_left"),d=document.querySelector(".slider-button_right");let u=!1;console.log("activSlideWidth "+t),console.log("slideWidth "+s),console.log("initialOffset "+l),console.log("offset "+r),e.style.transform=`translateX(${-l}px)`,o[0].style.opacity=0,o[1].style.transform=i,c.onclick=t=>{u||(u=!0,function(e,t){e.ontransitionend=t=>{e.ontransitionend=null,e.style.transition="none",o[1].removeAttribute("style"),e.lastElementChild.style.opacity=0,e.prepend(e.lastElementChild),e.style.transform=`translateX(${-l}px)`,u=!1},e.style.transition=a,e.style.transform=`translateX(${t-l}px)`,o[0].style.transition=a,o[0].style.opacity=1,o[0].style.transform=i,o[0].style.transitionTimingFunction="ease-in",o[1].style.transition=a,o[1].style.transform="translate(0) scale(1)",o[1].style.transitionTimingFunction="cubic-bezier(0,.75,.02,1)"}(e,r))},d.onclick=t=>{u||(u=!0,function(e,t){e.ontransitionend=t=>{e.ontransitionend=null,e.style.transition="none",o[0].removeAttribute("style"),e.append(o[0]),e.style.transform=`translateX(${-l}px)`,u=!1},e.style.transition=a,e.style.transform=`translateX(${-t-l}px)`,o[1].style.transition=a,o[1].style.opacity=0,o[1].style.transform="translate(0)",o[2].style.transition=a,o[2].style.transform=i,o[2].style.transitionTimingFunction="cubic-bezier(.72,.07,.95,.7)"}(e,r))}})(),e>1200&&(()=>{const e=document.querySelector(".feedback__list"),t=e.children,n=t[0].offsetWidth,o=e.offsetWidth,s=o/100*parseFloat(getComputedStyle(e).gap),l=Math.floor(o/(n+s)),r=Math.ceil(t.length/l),a=o-2*s,i=document.querySelector(".feedback >.slider-button_left"),c=document.querySelector(".feedback > .slider-button_right");let d=!1;console.log("gapValue "+s),console.log("slideWindowWidth "+o),console.log(t),console.log("slides.length "+t.length),console.log("slideListsAmount "+r),console.log("amountSlidesOnList "+l),e.style.transform=`translateX(${-a}px)`,c.onclick=n=>{console.log("right"),d||(d=!0,function(e,n){e.ontransitionend=o=>{e.ontransitionend=null,e.style.transition="none";for(let n=0;n<l;n++)e.append(t[0]);e.style.transform=`translateX(${-n}px)`,d=!1},e.style.transition="1s",e.style.transform=`translateX(${2*-n-s}px)`}(e,a))},i.onclick=t=>{console.log("left"),d||(d=!0,function(e,t){e.ontransitionend=n=>{e.ontransitionend=null,e.style.transition="none";for(let t=0;t<l;t++)e.prepend(e.lastElementChild);e.style.transform=`translateX(${-t}px)`,d=!1},e.style.transition="1s",e.style.transform=`translateX(${s}px)`}(e,a))}})(),e<=1250){const t=document.querySelector(".page-header__burger-button"),n=document.querySelector(".page-header").offsetHeight;console.log("headerHeigth "+n),t.onclick=()=>{if(t.classList.toggle("page-header__burger-button_open"),e<=680){const e=document.querySelector(".page-header__menu");e.style.top=`${n}px`,e.classList.toggle("page-header__menu_open"),e.querySelectorAll("a").forEach((n=>{n.onclick=()=>{e.classList.remove("page-header__menu_open"),t.classList.remove("page-header__burger-button_open")}}))}else{const e=document.querySelector(".page-header__nav");e.style.top=`${n}px`,e.classList.toggle("page-header__nav_open"),e.querySelectorAll("a").forEach((n=>{n.onclick=()=>{e.classList.remove("page-header__nav_open"),t.classList.remove("page-header__burger-button_open")}}))}}}}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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c291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktaG9sc3Qtc2l0ZS8uL3NyYy9zY3JpcHRzL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBcIi4uL3N0eWxlcy9pbmRleC5jc3NcIjtcclxuY29uc3QgbWFpbldpZHRoID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wYWdlLW1haW5cIikub2Zmc2V0V2lkdGg7XHJcblxyXG4vLyBIRVJPICBTTElERVJcclxuaWYgKG1haW5XaWR0aCA+IDgwMCkge1xyXG4gICgoKSA9PiB7XHJcbiAgICBjb25zdCBzbGlkZXNXcmFwcGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5zbGlkZXJfX3NsaWRlcy1saXN0XCIpLFxyXG4gICAgICBhY3RpdlNsaWRlV2lkdGggPSBwYXJzZUludChcclxuICAgICAgICBnZXRDb21wdXRlZFN0eWxlKFxyXG4gICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5oZXJvX19zbGlkZXJcIilcclxuICAgICAgICApLmdyaWRUZW1wbGF0ZUNvbHVtbnMuc3BsaXQoXCIgXCIpWzBdLFxyXG4gICAgICAgIDEwXHJcbiAgICAgICksXHJcbiAgICAgIGdhcFZhbHVlID0gcGFyc2VJbnQoZ2V0Q29tcHV0ZWRTdHlsZShzbGlkZXNXcmFwcGVyKS5nYXApLFxyXG4gICAgICBzbGlkZXMgPSBzbGlkZXNXcmFwcGVyLmNoaWxkcmVuLFxyXG4gICAgICBzbGlkZVdpZHRoID0gc2xpZGVzWzBdLm9mZnNldFdpZHRoLFxyXG4gICAgICBpbml0aWFsT2Zmc2V0ID0gc2xpZGVXaWR0aCAqIDIgKyBnYXBWYWx1ZSAtIGFjdGl2U2xpZGVXaWR0aCxcclxuICAgICAgb2Zmc2V0ID0gc2xpZGVXaWR0aCArIGdhcFZhbHVlLFxyXG4gICAgICB0cmFuc2l0aW9uVGltZSA9IFwiMC4zc1wiLFxyXG4gICAgICBzbGlkZVNjYWxlID1cclxuICAgICAgICBcInRyYW5zbGF0ZSgtMTIuNSUsIGNhbGMoMTIuNSUgLSAxNnB4KSkgc2NhbGUoMS4yNSlcIiAvKlwidHJhbnNsYXRlKC0xMCUsIDYuNSUpIHNjYWxlKDEuMilcIiovLFxyXG4gICAgICBsZWZ0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5zbGlkZXItYnV0dG9uX2xlZnRcIiksXHJcbiAgICAgIHJpZ2h0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5zbGlkZXItYnV0dG9uX3JpZ2h0XCIpO1xyXG5cclxuICAgIGxldCBpbkFjdGlvbiA9IGZhbHNlO1xyXG5cclxuICAgIC8vIEluaXRpYWxpemUgc2xpZGVyIHN0YXJ0IHBvc2l0aW9uXHJcblxyXG4gICAgY29uc29sZS5sb2coXCJhY3RpdlNsaWRlV2lkdGggXCIgKyBhY3RpdlNsaWRlV2lkdGgpO1xyXG4gICAgY29uc29sZS5sb2coXCJzbGlkZVdpZHRoIFwiICsgc2xpZGVXaWR0aCk7XHJcbiAgICBjb25zb2xlLmxvZyhcImluaXRpYWxPZmZzZXQgXCIgKyBpbml0aWFsT2Zmc2V0KTtcclxuICAgIGNvbnNvbGUubG9nKFwib2Zmc2V0IFwiICsgb2Zmc2V0KTtcclxuXHJcbiAgICBzbGlkZXNXcmFwcGVyLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGVYKCR7LWluaXRpYWxPZmZzZXR9cHgpYDtcclxuICAgIHNsaWRlc1swXS5zdHlsZS5vcGFjaXR5ID0gMDtcclxuICAgIC8vc2xpZGVzWzBdLnN0eWxlLnRyYW5zZm9ybSA9IFwidHJhbnNsYXRlKDApIHNjYWxlKDAuMylcIjtcclxuICAgIHNsaWRlc1sxXS5zdHlsZS50cmFuc2Zvcm0gPSBzbGlkZVNjYWxlO1xyXG4gICAgLy9zbGlkZXNbMF0uc3R5bGUudHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uID0gXCJlYXNlLWluXCI7XHJcblxyXG4gICAgZnVuY3Rpb24gbW92TGVmdChzbGlkZXNXcmFwcGVyLCBvZmZzZXQpIHtcclxuICAgICAgc2xpZGVzV3JhcHBlci5vbnRyYW5zaXRpb25lbmQgPSAoXykgPT4ge1xyXG4gICAgICAgIHNsaWRlc1dyYXBwZXIub250cmFuc2l0aW9uZW5kID0gbnVsbDtcclxuICAgICAgICBzbGlkZXNXcmFwcGVyLnN0eWxlLnRyYW5zaXRpb24gPSBcIm5vbmVcIjtcclxuICAgICAgICBzbGlkZXNbMF0ucmVtb3ZlQXR0cmlidXRlKFwic3R5bGVcIik7XHJcblxyXG4gICAgICAgIHNsaWRlc1dyYXBwZXIuYXBwZW5kKHNsaWRlc1swXSk7XHJcbiAgICAgICAgc2xpZGVzV3JhcHBlci5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlWCgkey1pbml0aWFsT2Zmc2V0fXB4KWA7XHJcblxyXG4gICAgICAgIGluQWN0aW9uID0gZmFsc2U7XHJcbiAgICAgIH07XHJcbiAgICAgIHNsaWRlc1dyYXBwZXIuc3R5bGUudHJhbnNpdGlvbiA9IHRyYW5zaXRpb25UaW1lOyAvL3RvZG8g0LfQsNC00LDQstCw0YLRjCB0cmFuc2l0aW9uINGH0LXRgNC10Lcg0LfQsNC/0Y/RgtGD0Y4g0LLRgdC10Lwg0YHRgNCw0LfRgz9cclxuICAgICAgc2xpZGVzV3JhcHBlci5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlWCgke1xyXG4gICAgICAgIC1vZmZzZXQgLSBpbml0aWFsT2Zmc2V0XHJcbiAgICAgIH1weClgO1xyXG5cclxuICAgICAgc2xpZGVzWzFdLnN0eWxlLnRyYW5zaXRpb24gPSB0cmFuc2l0aW9uVGltZTtcclxuICAgICAgc2xpZGVzWzFdLnN0eWxlLm9wYWNpdHkgPSAwO1xyXG4gICAgICBzbGlkZXNbMV0uc3R5bGUudHJhbnNmb3JtID0gXCJ0cmFuc2xhdGUoMClcIjsgLy8gc2NhbGUoMC4zKVxyXG5cclxuICAgICAgc2xpZGVzWzJdLnN0eWxlLnRyYW5zaXRpb24gPSB0cmFuc2l0aW9uVGltZTtcclxuICAgICAgc2xpZGVzWzJdLnN0eWxlLnRyYW5zZm9ybSA9IHNsaWRlU2NhbGU7XHJcbiAgICAgIHNsaWRlc1syXS5zdHlsZS50cmFuc2l0aW9uVGltaW5nRnVuY3Rpb24gPSBcImN1YmljLWJlemllciguNzIsLjA3LC45NSwuNylcIjsgLy8uNzUsMCwxLC4wMiBlYXNlLWluXHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBtb3ZSaWdodChzbGlkZXNXcmFwcGVyLCBvZmZzZXQpIHtcclxuICAgICAgc2xpZGVzV3JhcHBlci5vbnRyYW5zaXRpb25lbmQgPSAoXykgPT4ge1xyXG4gICAgICAgIHNsaWRlc1dyYXBwZXIub250cmFuc2l0aW9uZW5kID0gbnVsbDtcclxuICAgICAgICBzbGlkZXNXcmFwcGVyLnN0eWxlLnRyYW5zaXRpb24gPSBcIm5vbmVcIjtcclxuICAgICAgICBzbGlkZXNbMV0ucmVtb3ZlQXR0cmlidXRlKFwic3R5bGVcIik7XHJcblxyXG4gICAgICAgIHNsaWRlc1dyYXBwZXIubGFzdEVsZW1lbnRDaGlsZC5zdHlsZS5vcGFjaXR5ID0gMDtcclxuICAgICAgICBzbGlkZXNXcmFwcGVyLnByZXBlbmQoc2xpZGVzV3JhcHBlci5sYXN0RWxlbWVudENoaWxkKTtcclxuICAgICAgICBzbGlkZXNXcmFwcGVyLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGVYKCR7LWluaXRpYWxPZmZzZXR9cHgpYDtcclxuXHJcbiAgICAgICAgaW5BY3Rpb24gPSBmYWxzZTtcclxuICAgICAgfTtcclxuICAgICAgc2xpZGVzV3JhcHBlci5zdHlsZS50cmFuc2l0aW9uID0gdHJhbnNpdGlvblRpbWU7XHJcbiAgICAgIHNsaWRlc1dyYXBwZXIuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZVgoJHtvZmZzZXQgLSBpbml0aWFsT2Zmc2V0fXB4KWA7XHJcblxyXG4gICAgICBzbGlkZXNbMF0uc3R5bGUudHJhbnNpdGlvbiA9IHRyYW5zaXRpb25UaW1lO1xyXG4gICAgICBzbGlkZXNbMF0uc3R5bGUub3BhY2l0eSA9IDE7XHJcbiAgICAgIHNsaWRlc1swXS5zdHlsZS50cmFuc2Zvcm0gPSBzbGlkZVNjYWxlO1xyXG4gICAgICBzbGlkZXNbMF0uc3R5bGUudHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uID0gXCJlYXNlLWluXCI7XHJcblxyXG4gICAgICBzbGlkZXNbMV0uc3R5bGUudHJhbnNpdGlvbiA9IHRyYW5zaXRpb25UaW1lO1xyXG4gICAgICBzbGlkZXNbMV0uc3R5bGUudHJhbnNmb3JtID0gXCJ0cmFuc2xhdGUoMCkgc2NhbGUoMSlcIjtcclxuICAgICAgc2xpZGVzWzFdLnN0eWxlLnRyYW5zaXRpb25UaW1pbmdGdW5jdGlvbiA9IFwiY3ViaWMtYmV6aWVyKDAsLjc1LC4wMiwxKVwiOyAvLzAsLjc1LC4wMiwxICAvLyAwLDAsLjAyLDEgLy8gLjc1LDAsMSwuMDJcclxuICAgIH1cclxuXHJcbiAgICBsZWZ0Lm9uY2xpY2sgPSAoXykgPT4ge1xyXG4gICAgICBpZiAoaW5BY3Rpb24pIHJldHVybjtcclxuICAgICAgaW5BY3Rpb24gPSB0cnVlO1xyXG4gICAgICBtb3ZSaWdodChzbGlkZXNXcmFwcGVyLCBvZmZzZXQpO1xyXG4gICAgfTtcclxuICAgIHJpZ2h0Lm9uY2xpY2sgPSAoXykgPT4ge1xyXG4gICAgICBpZiAoaW5BY3Rpb24pIHJldHVybjtcclxuICAgICAgaW5BY3Rpb24gPSB0cnVlO1xyXG4gICAgICBtb3ZMZWZ0KHNsaWRlc1dyYXBwZXIsIG9mZnNldCk7XHJcbiAgICB9O1xyXG4gIH0pKCk7XHJcblxyXG4gIC8vIEZFRURCQUNLIFNMSURFUlxyXG5cclxuICAvL3RvZG8g0YDQsNGB0YjQuNGA0LjRgtGMINC+0LHQtdGA0YLQutGDINC90LAg0YDQsNC30LzQtdGAIGdhcCDQvNC10LbQtNGDINGB0LvQsNC4zIbQtNCw0LzQuCDRh9GC0L7QsdGLINC80L7QttC90L4g0LHRi9C70L4g0LLQvdGD0YLRgNGMINC/0L7Qu9C+0LbQuNGC0Ywg0YDQsNC30LzRi9GC0LjQtSDQuCDRgdC70LDQudC00Ysg0LzQtdC90Y/Qu9C40YHRjCDQsdC10Lcg0YDQtdC30LrQvtC5INC/0L7Qu9C+0YHRi1xyXG59XHJcblxyXG5pZiAobWFpbldpZHRoID4gMTIwMCkge1xyXG4gICgoKSA9PiB7XHJcbiAgICBjb25zdCBzbGlkZXNXcmFwcGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5mZWVkYmFja19fbGlzdFwiKSxcclxuICAgICAgc2xpZGVzID0gc2xpZGVzV3JhcHBlci5jaGlsZHJlbixcclxuICAgICAgc2xpZGVXaWR0aCA9IHNsaWRlc1swXS5vZmZzZXRXaWR0aCxcclxuICAgICAgc2xpZGVXaW5kb3dXaWR0aCA9IHNsaWRlc1dyYXBwZXIub2Zmc2V0V2lkdGgsXHJcbiAgICAgIGdhcFZhbHVlID1cclxuICAgICAgICAoc2xpZGVXaW5kb3dXaWR0aCAvIDEwMCkgKlxyXG4gICAgICAgIHBhcnNlRmxvYXQoZ2V0Q29tcHV0ZWRTdHlsZShzbGlkZXNXcmFwcGVyKS5nYXApLFxyXG4gICAgICBhbW91bnRTbGlkZXNPbkxpc3QgPSBNYXRoLmZsb29yKFxyXG4gICAgICAgIHNsaWRlV2luZG93V2lkdGggLyAoc2xpZGVXaWR0aCArIGdhcFZhbHVlKVxyXG4gICAgICApLFxyXG4gICAgICBzbGlkZUxpc3RzQW1vdW50ID0gTWF0aC5jZWlsKHNsaWRlcy5sZW5ndGggLyBhbW91bnRTbGlkZXNPbkxpc3QpLFxyXG4gICAgICBvZmZzZXQgPSBzbGlkZVdpbmRvd1dpZHRoIC0gMiAqIGdhcFZhbHVlLCAvL3NsaWRlV2luZG93V2lkdGggKyBnYXBWYWx1ZSxcclxuICAgICAgdHJhbnNpdGlvblRpbWUgPSBcIjFzXCIsXHJcbiAgICAgIGxlZnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmZlZWRiYWNrID4uc2xpZGVyLWJ1dHRvbl9sZWZ0XCIpLFxyXG4gICAgICByaWdodCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZmVlZGJhY2sgPiAuc2xpZGVyLWJ1dHRvbl9yaWdodFwiKTtcclxuXHJcbiAgICBsZXQgaW5BY3Rpb24gPSBmYWxzZTtcclxuXHJcbiAgICBjb25zb2xlLmxvZyhcImdhcFZhbHVlIFwiICsgZ2FwVmFsdWUpO1xyXG4gICAgY29uc29sZS5sb2coXCJzbGlkZVdpbmRvd1dpZHRoIFwiICsgc2xpZGVXaW5kb3dXaWR0aCk7XHJcbiAgICBjb25zb2xlLmxvZyhzbGlkZXMpO1xyXG4gICAgY29uc29sZS5sb2coXCJzbGlkZXMubGVuZ3RoIFwiICsgc2xpZGVzLmxlbmd0aCk7XHJcbiAgICBjb25zb2xlLmxvZyhcInNsaWRlTGlzdHNBbW91bnQgXCIgKyBzbGlkZUxpc3RzQW1vdW50KTtcclxuICAgIGNvbnNvbGUubG9nKFwiYW1vdW50U2xpZGVzT25MaXN0IFwiICsgYW1vdW50U2xpZGVzT25MaXN0KTtcclxuXHJcbiAgICAvLyBJbml0aWFsaXplIHNsaWRlciBzdGFydCBwb3NpdGlvbiAtMTAwJVxyXG4gICAgLy9zbGlkZXNXcmFwcGVyLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGVYKC0ke29mZnNldH1weClgO1xyXG4gICAgLy90b2RvINGD0YfQuNGC0YvQstCw0YLRjCBnYXAhXHJcbiAgICAvL3RvZG8g0LrQsNC6INCy0YvRgdGH0LjRgtCw0YLRjCDRgdC60L7Qu9GM0LrQviDQu9C40YHRgtC+0LI/ICjRiNC40YDQuNC90YMg0L7QutC90LAg0LTQtdC70LjRgtGMINC90LAg0YjQuNGA0LjQvdGDINC60LDRgNGC0L7Rh9C60Lgg0LHQtdC3INC+0YHRgtCw0YLQutCwINC4INC/0L7RgtC+0Lwg0LLRi9GB0YfQuNGC0YvQstCw0YLRjCDRgdC60L7Qu9GM0LrQviDQutCw0YDRgtC+0YfQtdC6INC90LAg0YHQutC+0LvRjNC60L4g0LvQuNGB0YLQvtCyPylcclxuICAgIC8vdG9kbyDQutGA0YPRgtC40YLRjCBzbGlkZUxpc3RzQW1vdW50INC60LDQuiBpbmRleCDRgSDQv9C10YDQtdGB0LrQvtC60L7QvCDQv9GA0Lgg0LTQvtGB0YLQuNC20LXQvdC40Lgg0LrRgNCw0Y8gaW5kZXggPSArK2luZGV4ICUgc2xpZGVzLmxlbmd0aDtcclxuXHJcbiAgICAvLyBJbml0aWFsaXplIHNsaWRlciBzdGFydCBwb3NpdGlvblxyXG4gICAgc2xpZGVzV3JhcHBlci5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlWCgkey1vZmZzZXR9cHgpYDtcclxuXHJcbiAgICBmdW5jdGlvbiBtb3ZMZWZ0KHNsaWRlc1dyYXBwZXIsIG9mZnNldCkge1xyXG4gICAgICBzbGlkZXNXcmFwcGVyLm9udHJhbnNpdGlvbmVuZCA9IChfKSA9PiB7XHJcbiAgICAgICAgc2xpZGVzV3JhcHBlci5vbnRyYW5zaXRpb25lbmQgPSBudWxsO1xyXG4gICAgICAgIHNsaWRlc1dyYXBwZXIuc3R5bGUudHJhbnNpdGlvbiA9IFwibm9uZVwiO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFtb3VudFNsaWRlc09uTGlzdDsgaSsrKSB7XHJcbiAgICAgICAgICBzbGlkZXNXcmFwcGVyLmFwcGVuZChzbGlkZXNbMF0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzbGlkZXNXcmFwcGVyLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGVYKCR7LW9mZnNldH1weClgO1xyXG5cclxuICAgICAgICBpbkFjdGlvbiA9IGZhbHNlO1xyXG4gICAgICB9O1xyXG4gICAgICBzbGlkZXNXcmFwcGVyLnN0eWxlLnRyYW5zaXRpb24gPSB0cmFuc2l0aW9uVGltZTtcclxuICAgICAgc2xpZGVzV3JhcHBlci5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlWCgkey1vZmZzZXQgKiAyIC0gZ2FwVmFsdWV9cHgpYDtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIG1vdlJpZ2h0KHNsaWRlc1dyYXBwZXIsIG9mZnNldCkge1xyXG4gICAgICBzbGlkZXNXcmFwcGVyLm9udHJhbnNpdGlvbmVuZCA9IChfKSA9PiB7XHJcbiAgICAgICAgc2xpZGVzV3JhcHBlci5vbnRyYW5zaXRpb25lbmQgPSBudWxsO1xyXG4gICAgICAgIHNsaWRlc1dyYXBwZXIuc3R5bGUudHJhbnNpdGlvbiA9IFwibm9uZVwiO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFtb3VudFNsaWRlc09uTGlzdDsgaSsrKSB7XHJcbiAgICAgICAgICBzbGlkZXNXcmFwcGVyLnByZXBlbmQoc2xpZGVzV3JhcHBlci5sYXN0RWxlbWVudENoaWxkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc2xpZGVzV3JhcHBlci5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlWCgkey1vZmZzZXR9cHgpYDtcclxuXHJcbiAgICAgICAgaW5BY3Rpb24gPSBmYWxzZTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHNsaWRlc1dyYXBwZXIuc3R5bGUudHJhbnNpdGlvbiA9IHRyYW5zaXRpb25UaW1lO1xyXG4gICAgICBzbGlkZXNXcmFwcGVyLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGVYKCR7Z2FwVmFsdWV9cHgpYDtcclxuICAgIH1cclxuXHJcbiAgICByaWdodC5vbmNsaWNrID0gKF8pID0+IHtcclxuICAgICAgY29uc29sZS5sb2coXCJyaWdodFwiKTtcclxuICAgICAgaWYgKGluQWN0aW9uKSByZXR1cm47XHJcbiAgICAgIGluQWN0aW9uID0gdHJ1ZTtcclxuICAgICAgbW92TGVmdChzbGlkZXNXcmFwcGVyLCBvZmZzZXQpO1xyXG4gICAgfTtcclxuICAgIGxlZnQub25jbGljayA9IChfKSA9PiB7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwibGVmdFwiKTtcclxuICAgICAgaWYgKGluQWN0aW9uKSByZXR1cm47XHJcblxyXG4gICAgICBpbkFjdGlvbiA9IHRydWU7XHJcbiAgICAgIG1vdlJpZ2h0KHNsaWRlc1dyYXBwZXIsIG9mZnNldCk7XHJcbiAgICB9O1xyXG4gIH0pKCk7XHJcbn1cclxuXHJcbmlmIChtYWluV2lkdGggPD0gMTI1MCkge1xyXG4gIGNvbnN0IGJ1cmdlckJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucGFnZS1oZWFkZXJfX2J1cmdlci1idXR0b25cIiksXHJcbiAgICBoZWFkZXJIZWlndGggPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnBhZ2UtaGVhZGVyXCIpLm9mZnNldEhlaWdodDtcclxuXHJcbiAgY29uc29sZS5sb2coXCJoZWFkZXJIZWlndGggXCIgKyBoZWFkZXJIZWlndGgpO1xyXG5cclxuICBidXJnZXJCdXR0b24ub25jbGljayA9ICgpID0+IHtcclxuICAgIGJ1cmdlckJ1dHRvbi5jbGFzc0xpc3QudG9nZ2xlKFwicGFnZS1oZWFkZXJfX2J1cmdlci1idXR0b25fb3BlblwiKTtcclxuXHJcbiAgICBpZiAobWFpbldpZHRoIDw9IDY4MCkge1xyXG4gICAgICBjb25zdCBoZWFkZXJNZW51ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wYWdlLWhlYWRlcl9fbWVudVwiKTtcclxuICAgICAgaGVhZGVyTWVudS5zdHlsZS50b3AgPSBgJHtoZWFkZXJIZWlndGh9cHhgO1xyXG4gICAgICBoZWFkZXJNZW51LmNsYXNzTGlzdC50b2dnbGUoXCJwYWdlLWhlYWRlcl9fbWVudV9vcGVuXCIpO1xyXG5cclxuICAgICAgaGVhZGVyTWVudS5xdWVyeVNlbGVjdG9yQWxsKFwiYVwiKS5mb3JFYWNoKChsaW5rKSA9PiB7XHJcbiAgICAgICAgbGluay5vbmNsaWNrID0gKCkgPT4ge1xyXG4gICAgICAgICAgaGVhZGVyTWVudS5jbGFzc0xpc3QucmVtb3ZlKFwicGFnZS1oZWFkZXJfX21lbnVfb3BlblwiKTtcclxuICAgICAgICAgIGJ1cmdlckJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKFwicGFnZS1oZWFkZXJfX2J1cmdlci1idXR0b25fb3BlblwiKTtcclxuICAgICAgICB9O1xyXG4gICAgICB9KTtcclxuICAgICAgLy8gdG9kbyDRg9Cx0LjRgNCw0YLRjCDQvtCx0YDQsNCx0L7RgtGH0LjQutC4INC/0YDQuCDQt9Cw0LrRgNGL0YLQuNC4INC80LXQvdGOP1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc3QgaGVhZGVyTmF2ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wYWdlLWhlYWRlcl9fbmF2XCIpO1xyXG4gICAgICBoZWFkZXJOYXYuc3R5bGUudG9wID0gYCR7aGVhZGVySGVpZ3RofXB4YDtcclxuICAgICAgaGVhZGVyTmF2LmNsYXNzTGlzdC50b2dnbGUoXCJwYWdlLWhlYWRlcl9fbmF2X29wZW5cIik7XHJcblxyXG4gICAgICBoZWFkZXJOYXYucXVlcnlTZWxlY3RvckFsbChcImFcIikuZm9yRWFjaCgobGluaykgPT4ge1xyXG4gICAgICAgIGxpbmsub25jbGljayA9ICgpID0+IHtcclxuICAgICAgICAgIGhlYWRlck5hdi5jbGFzc0xpc3QucmVtb3ZlKFwicGFnZS1oZWFkZXJfX25hdl9vcGVuXCIpO1xyXG4gICAgICAgICAgYnVyZ2VyQnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoXCJwYWdlLWhlYWRlcl9fYnVyZ2VyLWJ1dHRvbl9vcGVuXCIpO1xyXG4gICAgICAgIH07XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH07XHJcbn1cclxuIl0sIm5hbWVzIjpbIm1haW5XaWR0aCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIm9mZnNldFdpZHRoIiwic2xpZGVzV3JhcHBlciIsImFjdGl2U2xpZGVXaWR0aCIsInBhcnNlSW50IiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImdyaWRUZW1wbGF0ZUNvbHVtbnMiLCJzcGxpdCIsImdhcFZhbHVlIiwiZ2FwIiwic2xpZGVzIiwiY2hpbGRyZW4iLCJzbGlkZVdpZHRoIiwiaW5pdGlhbE9mZnNldCIsIm9mZnNldCIsInRyYW5zaXRpb25UaW1lIiwic2xpZGVTY2FsZSIsImxlZnQiLCJyaWdodCIsImluQWN0aW9uIiwiY29uc29sZSIsImxvZyIsInN0eWxlIiwidHJhbnNmb3JtIiwib3BhY2l0eSIsIm9uY2xpY2siLCJfIiwib250cmFuc2l0aW9uZW5kIiwidHJhbnNpdGlvbiIsInJlbW92ZUF0dHJpYnV0ZSIsImxhc3RFbGVtZW50Q2hpbGQiLCJwcmVwZW5kIiwidHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uIiwibW92UmlnaHQiLCJhcHBlbmQiLCJtb3ZMZWZ0Iiwic2xpZGVXaW5kb3dXaWR0aCIsInBhcnNlRmxvYXQiLCJhbW91bnRTbGlkZXNPbkxpc3QiLCJNYXRoIiwiZmxvb3IiLCJzbGlkZUxpc3RzQW1vdW50IiwiY2VpbCIsImxlbmd0aCIsImkiLCJidXJnZXJCdXR0b24iLCJoZWFkZXJIZWlndGgiLCJvZmZzZXRIZWlnaHQiLCJjbGFzc0xpc3QiLCJ0b2dnbGUiLCJoZWFkZXJNZW51IiwidG9wIiwicXVlcnlTZWxlY3RvckFsbCIsImZvckVhY2giLCJsaW5rIiwicmVtb3ZlIiwiaGVhZGVyTmF2Il0sInNvdXJjZVJvb3QiOiIifQ==